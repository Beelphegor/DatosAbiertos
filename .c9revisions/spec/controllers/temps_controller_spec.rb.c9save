{"ts":1367075250328,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'spec_helper'\n\n# This spec was generated by rspec-rails when you ran the scaffold generator.\n# It demonstrates how one might use RSpec to specify the controller code that\n# was generated by Rails when you ran the scaffold generator.\n#\n# It assumes that the implementation code is generated by the rails scaffold\n# generator.  If you are using any extension libraries to generate different\n# controller code, this generated spec may or may not pass.\n#\n# It only uses APIs available in rails and/or rspec-rails.  There are a number\n# of tools you can use to make these specs even more expressive, but we're\n# sticking to rails and rspec-rails APIs to keep things simple and stable.\n#\n# Compared to earlier versions of this generator, there is very limited use of\n# stubs and message expectations in this spec.  Stubs are only used when there\n# is no simpler way to get a handle on the object needed for the example.\n# Message expectations are only used when there is no simpler way to specify\n# that an instance is receiving a specific message.\n\ndescribe TempsController do\n\n  # This should return the minimal set of attributes required to create a valid\n  # Temp. As you add validations to Temp, be sure to\n  # update the return value of this method accordingly.\n  def valid_attributes\n    {  }\n  end\n\n  # This should return the minimal set of values that should be in the session\n  # in order to pass any filters (e.g. authentication) defined in\n  # TempsController. Be sure to keep this updated too.\n  def valid_session\n    {}\n  end\n\n  describe \"GET index\" do\n    it \"assigns all temps as @temps\" do\n      temp = Temp.create! valid_attributes\n      get :index, {}, valid_session\n      assigns(:temps).should eq([temp])\n    end\n  end\n\n  describe \"GET show\" do\n    it \"assigns the requested temp as @temp\" do\n      temp = Temp.create! valid_attributes\n      get :show, {:id => temp.to_param}, valid_session\n      assigns(:temp).should eq(temp)\n    end\n  end\n\n  describe \"GET new\" do\n    it \"assigns a new temp as @temp\" do\n      get :new, {}, valid_session\n      assigns(:temp).should be_a_new(Temp)\n    end\n  end\n\n  describe \"GET edit\" do\n    it \"assigns the requested temp as @temp\" do\n      temp = Temp.create! valid_attributes\n      get :edit, {:id => temp.to_param}, valid_session\n      assigns(:temp).should eq(temp)\n    end\n  end\n\n  describe \"POST create\" do\n    describe \"with valid params\" do\n      it \"creates a new Temp\" do\n        expect {\n          post :create, {:temp => valid_attributes}, valid_session\n        }.to change(Temp, :count).by(1)\n      end\n\n      it \"assigns a newly created temp as @temp\" do\n        post :create, {:temp => valid_attributes}, valid_session\n        assigns(:temp).should be_a(Temp)\n        assigns(:temp).should be_persisted\n      end\n\n      it \"redirects to the created temp\" do\n        post :create, {:temp => valid_attributes}, valid_session\n        response.should redirect_to(Temp.last)\n      end\n    end\n\n    describe \"with invalid params\" do\n      it \"assigns a newly created but unsaved temp as @temp\" do\n        # Trigger the behavior that occurs when invalid params are submitted\n        Temp.any_instance.stub(:save).and_return(false)\n        post :create, {:temp => {  }}, valid_session\n        assigns(:temp).should be_a_new(Temp)\n      end\n\n      it \"re-renders the 'new' template\" do\n        # Trigger the behavior that occurs when invalid params are submitted\n        Temp.any_instance.stub(:save).and_return(false)\n        post :create, {:temp => {  }}, valid_session\n        response.should render_template(\"new\")\n      end\n    end\n  end\n\n  describe \"PUT update\" do\n    describe \"with valid params\" do\n      it \"updates the requested temp\" do\n        temp = Temp.create! valid_attributes\n        # Assuming there are no other temps in the database, this\n        # specifies that the Temp created on the previous line\n        # receives the :update_attributes message with whatever params are\n        # submitted in the request.\n        Temp.any_instance.should_receive(:update_attributes).with({ \"these\" => \"params\" })\n        put :update, {:id => temp.to_param, :temp => { \"these\" => \"params\" }}, valid_session\n      end\n\n      it \"assigns the requested temp as @temp\" do\n        temp = Temp.create! valid_attributes\n        put :update, {:id => temp.to_param, :temp => valid_attributes}, valid_session\n        assigns(:temp).should eq(temp)\n      end\n\n      it \"redirects to the temp\" do\n        temp = Temp.create! valid_attributes\n        put :update, {:id => temp.to_param, :temp => valid_attributes}, valid_session\n        response.should redirect_to(temp)\n      end\n    end\n\n    describe \"with invalid params\" do\n      it \"assigns the temp as @temp\" do\n        temp = Temp.create! valid_attributes\n        # Trigger the behavior that occurs when invalid params are submitted\n        Temp.any_instance.stub(:save).and_return(false)\n        put :update, {:id => temp.to_param, :temp => {  }}, valid_session\n        assigns(:temp).should eq(temp)\n      end\n\n      it \"re-renders the 'edit' template\" do\n        temp = Temp.create! valid_attributes\n        # Trigger the behavior that occurs when invalid params are submitted\n        Temp.any_instance.stub(:save).and_return(false)\n        put :update, {:id => temp.to_param, :temp => {  }}, valid_session\n        response.should render_template(\"edit\")\n      end\n    end\n  end\n\n  describe \"DELETE destroy\" do\n    it \"destroys the requested temp\" do\n      temp = Temp.create! valid_attributes\n      expect {\n        delete :destroy, {:id => temp.to_param}, valid_session\n      }.to change(Temp, :count).by(-1)\n    end\n\n    it \"redirects to the temps list\" do\n      temp = Temp.create! valid_attributes\n      delete :destroy, {:id => temp.to_param}, valid_session\n      response.should redirect_to(temps_url)\n    end\n  end\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":5851}]],"length":5851}
